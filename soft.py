from telethon import TelegramClient, events, functions
import asyncio
import datetime
import re
import os
import json
from config import api_id, api_hash, phone, owner_id
from telethon.tl.types import InputReportReasonSpam, InputReportReasonOther
from telethon.errors import RPCError

client = TelegramClient('session_name', api_id, api_hash)

spamming = False
spam_task = None

spamming_snos = False
snos_task = None  # <-- –∑–¥–µ—Å—å!

LOG_DB = "logs.json"

# –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞
def load_log_db():
    if os.path.exists(LOG_DB):
        with open(LOG_DB, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–∞–∑—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ñ–∞–π–ª
def save_log_db(data):
    with open(LOG_DB, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2, ensure_ascii=False)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–∏—Ä—É–µ–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –æ—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–æ–≤
log_targets = load_log_db()  # —Å–ª–æ–≤–∞—Ä—å username -> user_id
log_files = {}  # user_id -> open file object

for username, uid in log_targets.items():
    log_files[str(uid)] = open(f"{username}.txt", "a", encoding="utf-8")

# --- –î–µ–∫–æ—Ä–∞—Ç–æ—Ä: –ø—Ä–æ–∫—Å–∏ —Å –Ω–æ–≤—ã–º raw_text, –¥–µ–ª–µ–≥–∏—Ä—É–µ—Ç –≤—Å–µ –º–µ—Ç–æ–¥—ã –æ—Ä–∏–≥–∏–Ω–∞–ª—É ---
def edit_delete_then_run(handler):
    class EventProxy:
        def __init__(self, original_event, new_raw_text):
            self._original_event = original_event
            self.raw_text = new_raw_text
        def __getattr__(self, item):
            return getattr(self._original_event, item)
    async def wrapper(event):
        if event.sender_id != owner_id:
            return
        proxy_event = EventProxy(event, event.raw_text)
        await handler(proxy_event)
        try:
            await event.edit(".")
            await asyncio.sleep(0.5)
            await event.delete()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è: {e}")
    return wrapper

# === –§–£–ù–ö–¶–ò–Ø –°–ü–ê–ú–ê ===
async def spam_loop(event, message, count):
    global spamming
    spamming = True
    i = 0
    while spamming and (count == -1 or i < count):
        await event.respond(message)
        i += 1
        await asyncio.sleep(0)

# === –§–£–ù–ö–¶–ò–Ø –ê–í–¢–û –ñ–ê–õ–û–ë (.snos) ===
async def snos_loop(event, count, peer, msg_id, reason_text):
    global spamming_snos
    spamming_snos = True
    i = 0
    while spamming_snos and (count == -1 or i < count):
        try:
            if reason_text:
                reason = InputReportReasonOther(text=reason_text)
            else:
                reason = InputReportReasonSpam()

            await client(functions.messages.ReportRequest(
                peer=peer,
                id=[msg_id],
                reason=reason,
                message="–ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –±–æ—Ç–æ–º"
            ))
            i += 1
            await asyncio.sleep(1)
        except Exception as e:
            await event.respond(f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∂–∞–ª–æ–±—ã: {e}")
            break

# === –ö–û–ú–ê–ù–î–ê .spam ===
@client.on(events.NewMessage(pattern=r'\.spam'))
@edit_delete_then_run
async def start_spam(event):
    global spam_task, spamming
    args = event.raw_text.split(' ', 2)
    if len(args) < 3:
        await event.respond("‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `.spam <–∫–æ–ª-–≤–æ> <—Å–æ–æ–±—â–µ–Ω–∏–µ>`")
        return
    try:
        count = int(args[1])
        msg = args[2]
    except ValueError:
        await event.respond("‚ùó –ö–æ–ª-–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º –∏–ª–∏ -1 –¥–ª—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ.")
        return

    if spam_task and not spam_task.done():
        spam_task.cancel()
    spam_task = asyncio.create_task(spam_loop(event, msg, count))

# === –ö–û–ú–ê–ù–î–ê .off ===
@client.on(events.NewMessage(pattern=r'\.off'))
@edit_delete_then_run
async def stop_spam(event):
    global spamming
    spamming = False

# === –ö–û–ú–ê–ù–î–ê .—Ç/.t ===
@client.on(events.NewMessage(pattern=r'\.(t|—Ç)'))
@edit_delete_then_run
async def typing_effect(event):
    try:
        args = event.raw_text.split(' ', 1)
        if len(args) < 2:
            return

        full_text = args[1]
        typed = ""
        msg = await event.respond("¬∑‚Ä¢‚Ä¢")

        for char in full_text:
            typed += char
            await msg.edit(f"{typed}¬∑‚Ä¢‚Ä¢")
            await asyncio.sleep(0.2)

        await msg.edit(typed)
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –≤ .t –∫–æ–º–∞–Ω–¥–µ:", e)

# === –ö–û–ú–ê–ù–î–ê .help ===
@client.on(events.NewMessage(pattern=r'\.help'))
@edit_delete_then_run
async def show_help(event):
    await event.respond(
        "**üìò –ö–æ–º–∞–Ω–¥—ã:**\n"
        "`.spam <–∫–æ–ª-–≤–æ> <—Å–æ–æ–±—â–µ–Ω–∏–µ>` ‚Äî —Å–ø–∞–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ (–∏—Å–ø–æ–ª—å–∑—É–π `-1` –¥–ª—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Å–ø–∞–º–∞)\n"
        "`.off` ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–ø–∞–º\n"
        "`.help` ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "`.—Ç/.t <—Ç–µ–∫—Å—Ç>` ‚Äî –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–∫–∞–¥—Ä–æ–≤–æ–µ –ø–∏—Å–∞–Ω–∏–µ\n"
        "`.snos <–∫–æ–ª-–≤–æ> [–ø—Ä–∏—á–∏–Ω–∞ –∂–∞–ª–æ–±—ã] {—Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ}` ‚Äî –∞–≤—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∂–∞–ª–æ–± –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "`.snos_off` ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ –∂–∞–ª–æ–±—ã\n"
        "`.status` ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–ø–∞–º–∞ –∏ –∂–∞–ª–æ–±\n"
        "`.log @username` ‚Äî –≤–∫–ª—é—á–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "`.logoff @username` ‚Äî –≤—ã–∫–ª—é—á–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ\n"
        "`.userinfo @username` ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ\n"
        "`.remindme <–≤—Ä–µ–º—è> <—Å–æ–æ–±—â–µ–Ω–∏–µ>` ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n"
        "`.afk_on` ‚Äî –≤–∫–ª—é—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å AFK (–¥–æ–±–∞–≤–∏—Ç—å [AFK] –∫ –∏–º–µ–Ω–∏)\n"
        "`.afk_off` ‚Äî –≤—ã–∫–ª—é—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å AFK (—É–±—Ä–∞—Ç—å [AFK] –∏–∑ –∏–º–µ–Ω–∏)\n"
    )

# === –ö–û–ú–ê–ù–î–ê .snos ===
@client.on(events.NewMessage(pattern=r'\.snos'))
@edit_delete_then_run
async def start_snos(event):
    global snos_task, spamming_snos
    args = event.raw_text.split(' ', 4)

    if len(args) < 2:
        await event.respond("‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `.snos <–∫–æ–ª-–≤–æ> [–ø—Ä–∏—á–∏–Ω–∞ –∂–∞–ª–æ–±—ã] {—Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ}`\n"
                            "–ü—Ä–∏–º–µ—Ä: `.snos 5 —Å–ø–∞–º https://t.me/username/123`")
        return

    try:
        count = int(args[1])
    except ValueError:
        await event.respond("‚ùó –ö–æ–ª-–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º –∏–ª–∏ -1 –¥–ª—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ.")
        return

    reason_text = None
    message_link = None

    if len(args) == 3:
        if args[2].startswith("http"):
            message_link = args[2]
        else:
            reason_text = args[2]

    elif len(args) >= 4:
        reason_text = args[2]
        message_link = args[3]

    if not message_link:
        await event.respond("‚ùó –ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∂–∞–ª–æ–±—ã.")
        return

    try:
        pattern = r"(?:https?://)?t\.me/(c/)?([\w\d_]+)/(\d+)"
        m = re.search(pattern, message_link)
        if not m:
            await event.respond("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
            return

        is_private = m.group(1)
        chat_id_part = m.group(2)
        msg_id = int(m.group(3))

        if is_private:
            chat_id = int("-100" + chat_id_part)
        else:
            chat_id = chat_id_part

        peer = await client.get_entity(chat_id)
    except Exception as e:
        await event.respond(f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ —Å—Å—ã–ª–∫–∏: {e}")
        return

    if snos_task and not snos_task.done():
        snos_task.cancel()

    snos_task = asyncio.create_task(snos_loop(event, count, peer, msg_id, reason_text))

    await event.respond(f"üö® –ó–∞–ø—É—â–µ–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ {count if count != -1 else '–±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ'} –∂–∞–ª–æ–± –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ {message_link}")

# === –ö–û–ú–ê–ù–î–ê .snos_off ===
@client.on(events.NewMessage(pattern=r'\.snos_off'))
@edit_delete_then_run
async def stop_snos(event):
    global spamming_snos
    spamming_snos = False
    await event.respond("–ê–≤—Ç–æ –∂–∞–ª–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")

# === –ö–û–ú–ê–ù–î–ê .status ===
@client.on(events.NewMessage(pattern=r'\.status'))
@edit_delete_then_run
async def show_status(event):
    status_msg = f"üìä –°—Ç–∞—Ç—É—Å:\n–°–ø–∞–º: {'–í–∫–ª—é—á–µ–Ω' if spamming else '–í—ã–∫–ª—é—á–µ–Ω'}\n–ê–≤—Ç–æ –∂–∞–ª–æ–±—ã: {'–í–∫–ª—é—á–µ–Ω—ã' if spamming_snos else '–í—ã–∫–ª—é—á–µ–Ω—ã'}"
    await event.respond(status_msg)

# === –ö–û–ú–ê–ù–î–ê .log ===
@client.on(events.NewMessage(pattern=r'\.log'))
@edit_delete_then_run
async def start_logging(event):
    global log_targets, log_files
    args = event.raw_text.split(' ', 1)
    if len(args) < 2:
        await event.respond("‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `.log @username`")
        return
    username = args[1].lstrip('@')
    try:
        user = await client.get_entity(username)
    except Exception as e:
        await event.respond(f"‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username}: {e}")
        return

    uid = str(user.id)
    if uid in log_files:
        await event.respond(f"‚ÑπÔ∏è –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è @{username} —É–∂–µ –≤–∫–ª—é—á–µ–Ω–æ.")
        return

    log_targets[username] = user.id
    save_log_db(log_targets)

    f = open(f"{username}.txt", "a", encoding="utf-8")
    log_files[uid] = f

    await event.respond(f"üìù –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} –≤–∫–ª—é—á–µ–Ω–æ.")

# === –ö–û–ú–ê–ù–î–ê .logoff ===
@client.on(events.NewMessage(pattern=r'\.logoff'))
@edit_delete_then_run
async def stop_logging(event):
    global log_targets, log_files
    args = event.raw_text.split(' ', 1)
    if len(args) < 2:
        await event.respond("‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `.logoff @username`")
        return
    username = args[1].lstrip('@')
    uid = None
    try:
        user = await client.get_entity(username)
        uid = str(user.id)
    except Exception as e:
        await event.respond(f"‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username}: {e}")
        return

    if uid not in log_files:
        await event.respond(f"‚ÑπÔ∏è –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è @{username} –Ω–µ –±—ã–ª–æ –≤–∫–ª—é—á–µ–Ω–æ.")
        return

    log_files[uid].close()
    del log_files[uid]
    if username in log_targets:
        del log_targets[username]
    save_log_db(log_targets)

    await event.respond(f"üõë –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} –≤—ã–∫–ª—é—á–µ–Ω–æ.")

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ===
@client.on(events.NewMessage())
async def log_new_message(event):
    global log_files
    uid = str(event.sender_id)
    if uid in log_files:
        f = log_files[uid]
        now = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        text = event.raw_text.replace("\n", "\\n")
        f.write(f"[{now}] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (id {event.id}): {text}\n")
        f.flush()

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ===
@client.on(events.MessageEdited())
async def log_edited_message(event):
    global log_files
    uid = str(event.sender_id)
    if uid in log_files:
        f = log_files[uid]
        now = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        new_text = event.text.replace("\n", "\\n") if event.text else ""
        f.write(f"[{now}] –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ (id {event.id}): {new_text}\n")
        f.flush()

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª—ë–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ===
@client.on(events.MessageDeleted())
async def log_deleted_message(event):
    global log_files
    now = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    deleted_ids = event.deleted_ids
    if not deleted_ids:
        return
    for uid, f in log_files.items():
        f.write(f"[{now}] –£–¥–∞–ª–µ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è —Å id: {deleted_ids}\n")
        f.flush()

# === –ö–û–ú–ê–ù–î–ê .userinfo ===
@client.on(events.NewMessage(pattern=r'\.userinfo'))
@edit_delete_then_run
async def user_info(event):
    args = event.raw_text.split(' ', 1)
    if len(args) < 2:
        await event.respond("‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `.userinfo @username`")
        return
    username = args[1].lstrip('@')
    try:
        user = await client.get_entity(username)
    except Exception as e:
        await event.respond(f"‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username}: {e}")
        return

    info = (
        f"üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ @{username}:\n"
        f"ID: {user.id}\n"
        f"–ò–º—è: {user.first_name or '-'}\n"
        f"–§–∞–º–∏–ª–∏—è: {user.last_name or '-'}\n"
        f"Username: @{user.username or '-'}\n"
        f"–ë–æ—Ç: {'–î–∞' if user.bot else '–ù–µ—Ç'}\n"
        f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–ø—Ä–∏–º–µ—Ä–Ω–∞—è): {user.date.strftime('%Y-%m-%d') if hasattr(user, 'date') and user.date else '-'}"
    )
    await event.respond(info)

# === –ö–û–ú–ê–ù–î–ê .remindme ===
@client.on(events.NewMessage(pattern=r'\.remindme'))
@edit_delete_then_run
async def remind_me(event):
    args = event.raw_text.split(' ', 2)
    if len(args) < 3:
        await event.respond("‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `.remindme <–≤—Ä–µ–º—è> <—Å–æ–æ–±—â–µ–Ω–∏–µ>`\n"
                            "–ü—Ä–∏–º–µ—Ä –≤—Ä–µ–º–µ–Ω–∏: 10s (—Å–µ–∫—É–Ω–¥), 5m (–º–∏–Ω—É—Ç), 1h (—á–∞—Å)")
        return
    time_str = args[1]
    message = args[2]

    match = re.match(r"(\d+)([smh])", time_str.lower())
    if not match:
        await event.respond("‚ùó –§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ–≤–µ—Ä–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π —á–∏—Å–ª–æ + s/m/h (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10s, 5m, 1h)")
        return
    amount, unit = int(match.group(1)), match.group(2)
    seconds = amount
    if unit == 'm':
        seconds *= 60
    elif unit == 'h':
        seconds *= 3600

    await event.respond(f"‚è≥ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {amount}{unit}")

    async def reminder():
        await asyncio.sleep(seconds)
        await client.send_message(event.chat_id, f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {message}")

    asyncio.create_task(reminder())

# === –ö–û–ú–ê–ù–î–ê .afk_on ===
@client.on(events.NewMessage(pattern=r'\.afk_on'))
@edit_delete_then_run
async def afk_on(event):
    me = await client.get_me()
    first_name = me.first_name or ""
    if first_name.startswith("[AFK]"):
        await event.respond("‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å AFK —É–∂–µ –≤–∫–ª—é—á—ë–Ω.")
        return

    new_name = "[AFK] " + first_name
    try:
        await client(functions.account.UpdateProfileRequest(first_name=new_name))
        await event.respond(f"‚úÖ –°—Ç–∞—Ç—É—Å AFK –≤–∫–ª—é—á—ë–Ω. –ò–º—è –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {new_name}")
    except Exception as e:
        await event.respond(f"‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –∏–º—è: {e}")

# === –ö–û–ú–ê–ù–î–ê .afk_off ===
@client.on(events.NewMessage(pattern=r'\.afk_off'))
@edit_delete_then_run
async def afk_off(event):
    me = await client.get_me()
    first_name = me.first_name or ""
    if not first_name.startswith("[AFK]"):
        await event.respond("‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å AFK –Ω–µ –±—ã–ª –≤–∫–ª—é—á—ë–Ω.")
        return

    new_name = first_name[6:]  # –£–±–∏—Ä–∞–µ–º "[AFK] "
    try:
        await client(functions.account.UpdateProfileRequest(first_name=new_name))
        await event.respond(f"‚úÖ –°—Ç–∞—Ç—É—Å AFK –≤—ã–∫–ª—é—á–µ–Ω. –ò–º—è –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {new_name}")
    except Exception as e:
        await event.respond(f"‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –∏–º—è: {e}")

# === –°–¢–ê–†–¢ –ö–õ–ò–ï–ù–¢–ê ===
while True:
    try:
        client.start(phone=phone)
        print("‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω.")
        client.run_until_disconnected()
    except (RpcError, ConnectionError, OSError) as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}. –ü—Ä–æ–±—É—é –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
        time.sleep(5)
    except KeyboardInterrupt:
        print("–í—ã—Ö–æ–¥ –ø–æ Ctrl+C")
        break